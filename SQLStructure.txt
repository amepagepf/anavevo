
-- Create UserSession Table
create table papareo.usersession (
	id SERIAL PRIMARY KEY,
	id_user INTEGER,
	ip_user VARCHAR,
	date_creation DATE,
	date_creation_timestamp TIMESTAMP,
	date_expiration DATE,
	date_expiration_timestamp TIMESTAMP,
	cookie_session_id VARCHAR,
	active BOOLEAN
)

-- Create User table
CREATE TABLE papareo.user(
	id SERIAL PRIMARY KEY,
	username VARCHAR UNIQUE,
	password VARCHAR,
	firstname VARCHAR,
	lastname VARCHAR,
	date_creation DATE,
	date_creation_timestamp TIMESTAMP,
	private_access BOOLEAN
)

-- Function to jsonfy the tables
-- FUNCTION: papareo.anavevo_jsonfy_function(character varying)

-- DROP FUNCTION IF EXISTS papareo.anavevo_jsonfy_function(character varying);

CREATE OR REPLACE FUNCTION papareo.anavevo_jsonfy_function(
	_tablename character varying)
    RETURNS json
    LANGUAGE 'plpgsql'
    COST 100
    IMMUTABLE STRICT PARALLEL UNSAFE
AS $BODY$
	/*	Fonction anavevo_search_function: renvoie le HTML des résultats de la recherche saisie par l'utilisateur
		Versions:
			le 22/02/2022 (AM) Création
			le 28/02/2022 (AM) Revue avec Hugues
	*/

DECLARE 

	_strQuery VARCHAR := '';
	_jsonTableValues JSON;

BEGIN

	_strQuery := 'SELECT json_agg(to_json((c))) FROM papareo.%s c';
	
	EXECUTE FORMAT(_strQuery, _tablename) INTO _jsonTableValues;
	
	RETURN _jsonTableValues;
	
END;
$BODY$;

ALTER FUNCTION papareo.anavevo_jsonfy_function(character varying)
    OWNER TO postgres;

-- Function to search element
-- FUNCTION: papareo.anavevo_search_function(character varying)

-- DROP FUNCTION IF EXISTS papareo.anavevo_search_function(character varying);

CREATE OR REPLACE FUNCTION papareo.anavevo_search_function(
	_strsearchinputtext character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    IMMUTABLE STRICT PARALLEL UNSAFE
AS $BODY$
	/*	Fonction anavevo_search_function: renvoie le HTML des résultats de la recherche saisie par l'utilisateur
		Versions:
			le 22/02/2022 (AM) Création
			le 28/02/2022 (AM) Revue avec Hugues + gestion du tahitien
	*/

DECLARE 

	_strHTML VARCHAR := '';
	_strHTMLContent VARCHAR;
	_charPlural CHAR(1);
	_intCount INTEGER := 0;

BEGIN

	_strHTML := _strHTML || '<div class="search-results-container">';
	_strHTML := _strHTML || 		'<div class="search-summary">';
	_strHTML := _strHTML || 			'<div class="search-summary-title">';
	_strHTML := _strHTML || 				'<h4>Nombre de résultats:</h4>';
	_strHTML := _strHTML || 			'</div>';
	_strHTML := _strHTML || 			'<div class="search-summary-results">';

	SELECT COUNT(*) INTO _intCount
	FROM papareo.entree
 	WHERE to_tsvector('french', html) || to_tsvector('french', html)
	@@ to_tsquery('french', regexp_replace(_strsearchinputtext, '\s+', ' & ', 'gi'));
	
	IF _intCount > 0 THEN
	
		IF _intCount > 1 THEN
			_charPlural := 's';
		END IF;
		
		_strHTML := _strHTML || 				'<p>%s résultat%s trouvé%s.</p>';
		_strHTML := _strHTML ||			'</div>';
		_strHTML := _strHTML ||		'</div>';
		_strHTML := _strHTML || 		'<div class="search-results">';
		_strHTML := _strHTML || 			'<div class="search-results-title">';
		_strHTML := _strHTML ||				'<h4>Résultats de la recherche:</h4>';
		_strHTML := _strHTML || 			'</div>';
		_strHTML := _strHTML ||			'<div class="search-results-content">';
		_strHTML := _strHTML || 				'%s';
		_strHTML := _strHTML ||			'</div>';
		_strHTML := _strHTML || 		'</div>';
		_strHTML := _strHTML || 	'</div>';
		
		SELECT string_agg(html, '<br>') into _strHTMLContent
		FROM papareo.entree
		WHERE to_tsvector('french', html)
		@@ to_tsquery('french', regexp_replace(_strsearchinputtext, '\s+', ' & ', 'gi'));

		_strHTML := FORMAT(_strHTML, _intCount, _charPlural, _charPlural, _strHTMLContent);

	ELSE
		_strHTML := _strHTML || 				'<p>Aucun résultat trouvé.</p>';
		_strHTML := _strHTML || 			'</div>';
		_strHTML := _strHTML || 		'</div>';
		_strHTML := _strHTML || 	'</div>';		
	END IF;
	
	RETURN _strHTML;
	
END;
$BODY$;

ALTER FUNCTION papareo.anavevo_search_function(character varying)
    OWNER TO postgres;

-- Table qui stocke les index de recherche
CREATE TABLE papareo.entry(
	id SERIAL PRIMARY KEY,
	id_collection INTEGER,
	id_item INTEGER,
	id_essence INTEGER,
	html TEXT,
	collectionhtml TEXT,
	itemhtml TEXT,
	essencehtml TEXT,
	contenu TEXT[]
)

-- Requête INSERT dans la table entry
INSERT INTO papareo.entry(id_collection, id_item, id_essence, contenu_accent, contenu_sans_accent, htmllink, htmlsummary)

	-- Requête pour récupérer uniquement les collections
	(SELECT 
	collection.id,
	NULL,
	CAST (NULL AS INTEGER),
	STRING_TO_ARRAY(REGEXP_REPLACE(UPPER(TRIM(CONCAT(collection.title, ' ', collection.description))), '\s+', '<*>', 'gi'), '<*>') as contenu_accent,
	STRING_TO_ARRAY(REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(TRIM(CONCAT(collection.title, ' ', collection.description))), True), '\s+', '<*>', 'gi'), '<*>') as contenu_sans_accent,
	concat('<a href="http://localhost:8888/library/', 
		   CASE WHEN collection.identifier IS NOT NULL THEN concat(CAST(collection.id AS TEXT), '-', collection.identifier) ELSE concat(CAST(collection.id AS TEXT)) END,
		   '.col" ',
		   ' class="btn btn-outline-primary btn-lg m-3" role="button">',
		   CASE WHEN collection.identifier IS NOT NULL THEN concat(CAST(collection.id AS TEXT), '-', collection.identifier) ELSE concat(CAST(collection.id AS TEXT)) END,
		   '</a>'),
	concat('<div class="text-result-summary">',
		   '<p class="title-text-result">',
		   collection.title,
		   '</p>',
		   '<p class="description-text-result">',
		   collection.description,
		   '</p>',
		   '</div>'
	)
	FROM papareo.collection
	WHERE collection.id IS NOT NULL)
	
	UNION ALL
	-- Requête pour récupérer uniquement les items
	(SELECT 
	collection.id,
	item.id,
	CAST(NULL AS INTEGER),
	STRING_TO_ARRAY(REGEXP_REPLACE(UPPER(TRIM(CONCAT(item.title, ' ', item.description))), '\s+', '<*>', 'gi'), '<*>') as contenu_accent,
	STRING_TO_ARRAY(REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(TRIM(CONCAT(item.title, ' ', item.description))), True), '\s+', '<*>', 'gi'), '<*>') as contenu_sans_accent,
	concat('<a href="http://localhost:8888/library/', 
	CASE WHEN collection.identifier IS NOT NULL THEN concat(CAST(collection.id AS TEXT), '-', collection.identifier) ELSE concat(CAST(collection.id AS TEXT)) END,
	'/', 
	CASE WHEN item.identifier IS NOT NULL THEN concat(CAST(item.id AS TEXT), '-', item.identifier) ELSE concat(CAST(item.id AS TEXT)) END,
	'.ite" ',
	' class="btn btn-outline-primary btn-lg m-3" role="button">',
	CASE WHEN item.identifier IS NOT NULL THEN concat(CAST(item.id AS TEXT), '-', item.identifier) ELSE concat(CAST(item.id AS TEXT)) END,
	'</a>'),
	concat('<div class="text-result-summary">',
		   '<p class="title-text-result">',
		   item.title,
		   '</p>',
		   '<p class="description-text-result">',
		   item.description,
		   '</p>',
		   '</div>'
	)
	FROM papareo.collection
	INNER JOIN papareo.item on collection.id = item.collection_id
	WHERE item.id IS NOT NULL)

	UNION ALL
	-- Requête pour insérer le HTML des essences (pas de contenu)
	(SELECT 
	collection.id,
	item.id,
	essence.id,
	NULL,
	NULL,
	concat('<ul><div class="essence-navigation-hide">',
	'<a href="http://localhost:8888/library/', 
	CASE WHEN collection.identifier IS NOT NULL THEN concat(CAST(collection.id AS TEXT), '-', collection.identifier) ELSE concat(CAST(collection.id AS TEXT)) END,
	'/', 
	CASE WHEN item.identifier IS NOT NULL THEN concat(CAST(item.id AS TEXT), '-', item.identifier) ELSE concat(CAST(item.id AS TEXT)) END,
	'/', essence.id, '.ess" ',
	' class="btn btn-outline-primary btn-lg m-3" role="button">',
	essence.id,
	'</a>'
	'</div></ul>'),
	 NULL
	FROM papareo.collection
	INNER JOIN papareo.item ON collection.id = item.collection_id
	INNER JOIN papareo.essence ON item.id = essence.item_id
	WHERE essence.id IS NOT NULL)



-- New Search Request
-- FUNCTION: papareo.anavevo_search_function(character varying)

-- DROP FUNCTION IF EXISTS papareo.anavevo_search_function(character varying);

CREATE OR REPLACE FUNCTION papareo.anavevo_search_function(
	_strsearchinputtext character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    IMMUTABLE STRICT PARALLEL UNSAFE
AS $BODY$
	/*	Fonction anavevo_search_function: renvoie le HTML des résultats de la recherche saisie par l'utilisateur
		Versions:
			le 22/02/2022 (AM) Création
			le 28/02/2022 (AM) Revue avec Hugues + gestion du tahitien
			le 24/03/2022 (AM) Eclatage propre du html, recherche sur la bonne colonne
			le 25/03/2022 (AM) Construction de toute la structure HTML en une requête correcte, pour resortir uniquement les éléments de la recherche
			le 29/03/2022 (AM) La recherche plein texte sans ts_vector
			le 30/03/2022 (AM) Ne rien renvoyer quand la recherche est vide + gestion du case insensitive
			le 31/03/2022 (AM) Revue de la fonction de recherche, pour chercher dans toutes les balises <p> et y faire le remplacement
	*/

DECLARE 

	_strHTML VARCHAR := '';
	_strHTMLContent VARCHAR;
	_strFormRegexpMatches VARCHAR := '';
	_charPlural CHAR(1);
	_intCount INTEGER := 0;

BEGIN

	SELECT CONCAT(
	'<div class="search-results-container">',
		'<div class="search-summary">',
			'<div class="search-summary-title">',
				'<h4>Nombre de résultats:</h4>',
			'</div>',
			'<div class="search-summary-results">')
	INTO _strHTML;
		
	SELECT COUNT(*) INTO _intCount
	FROM papareo.entry
 	WHERE entry.contenu_sans_accent @> 
	STRING_TO_ARRAY(REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(CASE WHEN _strsearchinputtext = '' THEN 'TheArrayIsEmpty' ELSE _strsearchinputtext END), True), '\s+', '<*>', 'gi'), '<*>');
		
	IF _intCount > 0 THEN
	
		IF _intCount > 1 THEN
			_charPlural := 's';
		END IF;
		
		SELECT CONCAT(_strHTML,
					'<p>%s résultat%s trouvé%s.</p>',
				'</div>',
			'</div>',
			'<div class="search-results">',
				'<div class="search-results-title">',
					'<h4>Résultats de la recherche ''%s'':</h4>',
				'</div>',
				'<div class="search-results-content">',
						'%s',
				'</div>',
			'</div>',
		'</div>')
		INTO _strHTML;
		
		-- Requête pour constuire le HTML des résultats issus de la recherche
		with table_searchinput as (
			-- Décompose les mots de la recherche en ligne de mots
			SELECT ARRAY_TO_STRING(REGEXP_MATCHES(CONCAT('<*>', REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(_strsearchinputtext), True), '\s+', '<*>', 'gi'), '<*>'), '>(.*?)<', 'gi'), '') as row_searchinput
			ORDER BY row_searchinput ASC
		), table_searchinput_upper as (
			-- Récupération des valeurs avec accents des mots de la recherche depuis la colonne contenu_sans_accent et contenu_accente
			SELECT DISTINCT contenu_accent[array_position(contenu_sans_accent, table_searchinput.row_searchinput)] as row_searchinput_upper
			FROM papareo.entry, table_searchinput
			WHERE entry.contenu_sans_accent @> 
			STRING_TO_ARRAY(REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(table_searchinput.row_searchinput), True), '\s+', '<*>', 'gi'), '<*>')
			ORDER BY row_searchinput_upper ASC
		), regexpmatch_searchinput as (
			-- Création du string pour le match du regex_match avec la séparation des mots
			select string_agg(table_searchinput_upper.row_searchinput_upper, '|') as regexpmatch_searchinput
			from table_searchinput_upper
		), table_searchinput_upper_regex as (
			-- Rajout de la recherche par mot exact sur la regex d'un mot
			SELECT CONCAT('\y', table_searchinput_upper.row_searchinput_upper, '\y') as row_searchinput_upper_regex
			FROM table_searchinput_upper
			ORDER BY table_searchinput_upper.row_searchinput_upper ASC
		), array_regex_match as (
			-- Mettre les mots regex dans un array pour le matching
			select array_agg(table_searchinput_upper_regex.row_searchinput_upper_regex) as array_regex from table_searchinput_upper_regex	
		), table_content_balise as (
			-- Récupération du contenu dans chaque balise <p>
			SELECT 
			id,
			entry.htmlsummary,
			array_to_string(regexp_matches(entry.htmlsummary, '">(.*?)</p', 'gi'), '') as htmlsummarymatch
			from papareo.entry
			where entry.contenu_sans_accent @> 
			STRING_TO_ARRAY(REGEXP_REPLACE(papareo.tif_desaccentue(UPPER(_strsearchinputtext), True), '\s+', '<*>', 'gi'), '<*>')
		), table_content_balise_notempty as (
			-- Filtre pour n'avoir que les éléments non vide (pas de '' ou null)
			SELECT 
			id,
			htmlsummary,
			htmlsummarymatch, 
			concat('<span class="mark-result">',
					array_to_string(regexp_matches(CONCAT('<*>', regexp_replace(array_to_string(regexp_matches(htmlsummarymatch, regexpmatch_searchinput.regexpmatch_searchinput, 'gi'), ''), '\s+', '<*>'), '<*>'),
													'>(.*?)<',
													'gi'), '') ,
				   '</span>') as word_regex
			FROM table_content_balise, regexpmatch_searchinput
			WHERE htmlsummarymatch != ''
			AND htmlsummarymatch IS NOT NULL
			ORDER BY id asc, htmlsummary asc, htmlsummarymatch asc, word_regex asc
		), array_regex_replace_word as (
			-- Création d'un array pour le remplacement des mots de chaque contenu de balise <p> spécifique par id
			select table_content_balise_notempty.id,
			table_content_balise_notempty.htmlsummary,
			table_content_balise_notempty.htmlsummarymatch,
			array_regex_match.array_regex as array_match,
			array_agg(table_content_balise_notempty.word_regex) as array_replace		
			from table_content_balise_notempty, array_regex_match
			group by table_content_balise_notempty.id, array_regex_match.array_regex, table_content_balise_notempty.htmlsummary, table_content_balise_notempty.htmlsummarymatch
		), table_replace_word as (
			-- Remplacement de chaque mot matché par une balise mark avec la bonne valeur du mot avant remplacement
			select
			array_regex_replace_word.id,
			array_regex_replace_word.htmlsummary,
			array_regex_replace_word.htmlsummarymatch,
			papareo.regexp_remplacechaque(array_regex_replace_word.htmlsummarymatch, 
										  array_regex_replace_word.array_match, 
										  array_regex_replace_word.array_replace,
										  'gi') as htmlsummaryreplace
			from array_regex_replace_word							  
		), array_regex_replace_balise as (
			-- On transforme les contenus des balises en array et le remplacement du contenu de la balise avec les balises mark pour chaque mot groupé par id
			SELECT 
			table_replace_word.id,
			table_replace_word.htmlsummary,
			array_agg(table_replace_word.htmlsummarymatch) as array_match,
			array_agg(table_replace_word.htmlsummaryreplace) as array_replace
			FROM table_replace_word
			where table_replace_word.htmlsummaryreplace is not null
			GROUP BY table_replace_word.id, table_replace_word.htmlsummary
		), table_replace_balise as (
			-- On remplace chaque contenu de balise par le contenu avec le mark des mots dans le champ html général
			SELECT 
			array_regex_replace_balise.id,
			array_regex_replace_balise.htmlsummary,
			papareo.regexp_remplacechaque(array_regex_replace_balise.htmlsummary, 
										  array_regex_replace_balise.array_match, 
										  array_regex_replace_balise.array_replace,
										  'gi') as htmlsummaryreplaced
			FROM array_regex_replace_balise								
		), elementresults as (
			-- On récupère toutes les informations sur le champ htmlreplace précédemment
			SELECT DISTINCT table_replace_balise.htmlsummaryreplaced, entry.id, entry.htmllink, entry.id_collection, entry.id_item, entry.id_essence
			FROM papareo.entry
			INNER JOIN table_replace_balise ON table_replace_balise.id = entry.id
		), uniquecollection as (
			-- On récupère la collection associée à elementsresults
			SELECT DISTINCT entry.htmllink, elementresults.htmlsummaryreplaced, entry.htmlsummary, entry.id_collection, entry.id_item, entry.id_essence, entry.id
			FROM papareo.entry
			LEFT JOIN elementresults ON elementresults.id_collection = entry.id_collection
			AND entry.id = elementresults.id
			WHERE entry.htmllink IS NOT NULL
			AND entry.id_collection IS NOT NULL
			AND entry.id_item IS NULL
			AND entry.id_essence IS NULL
			AND entry.id_collection IN (SELECT DISTINCT elementresults.id_collection FROM elementresults)	
		), uniqueitem as (
			-- On récupère l'item associée à elementsresults
			SELECT DISTINCT entry.htmllink, elementresults.htmlsummaryreplaced, entry.htmlsummary, entry.id_collection, entry.id_item, entry.id_essence, entry.id
			FROM papareo.entry
			LEFT JOIN elementresults ON elementresults.id_collection = entry.id_collection
			AND elementresults.id_item = entry.id_item
			AND elementresults.id = entry.id
			WHERE entry.htmllink IS NOT NULL
			AND entry.id_collection IS NOT NULL
			AND entry.id_item IS NOT NULL
			AND entry.id_essence IS NULL
			AND entry.id_item IN (SELECT DISTINCT elementresults.id_item FROM elementresults)
		), uniqueessence as (
			-- On récupère l'essence associée à elementsresults
			SELECT DISTINCT entry.htmllink, elementresults.htmlsummaryreplaced, entry.htmlsummary, entry.id, entry.id_collection, entry.id_item, entry.id_essence
			FROM papareo.entry
			LEFT JOIN elementresults ON entry.id_collection = elementresults.id_collection 
			AND entry.id_item = elementresults.id_item
			AND entry.id_essence = elementresults.id_essence
			AND elementresults.id = entry.id
			WHERE entry.htmllink IS NOT NULL
			AND entry.id_collection IS NOT NULL
			AND entry.id_item IS NOT NULL
			AND entry.id_essence IS NOT NULL
		)
		-- On construit tout le HTML en une traite
		SELECT
		string_agg(concat('<tr>',
					'<td>',
						'<ul class="arbo-direction-column">',
							'<div class="collection-container">',
								'<div class="collection-navigation">', 
									CASE WHEN (SELECT string_agg(uniqueitem.htmllink, '')
											   FROM uniqueitem
											   WHERE uniqueitem.id_collection = uniquecollection.id_collection
											   AND uniqueitem.id_item IS NOT NULL
											   GROUP BY uniqueitem.id_collection
											  ) IS NOT NULL THEN
									'<div class="arrow-down" onclick="showSearchArborescence(this)"></div>'
									ELSE 
									'<div class="no-arrow"></div>'
									END,
									uniquecollection.htmllink,
								'</div>',
								CASE WHEN uniquecollection.htmlsummaryreplaced IS NOT NULL
								THEN concat('<div class="text-result-summary">',
											uniquecollection.htmlsummaryreplaced,
											'</div>')
								ELSE concat('<div class="text-result-summary">',
											uniquecollection.htmlsummary,
											'</div>') END,

								(SELECT 
								string_agg(concat('<ul>', 
													'<div class="item-container-show">',
															'<div class="item-navigation">',
																CASE WHEN (SELECT string_agg(uniqueessence.htmllink, '') 
																		FROM uniqueessence
																		WHERE uniqueessence.id_item = uniqueitem.id_item
																		AND uniqueessence.id_essence IS NOT NULL
																		GROUP BY uniqueessence.id_item
																		) IS NOT NULL THEN
																'<div class="arrow-right" onclick="showSearchArborescence(this)"></div>'
																ELSE 
																'<div class="no-arrow"></div>'
																END,
																uniqueitem.htmllink,
															'</div>',
															CASE WHEN uniqueitem.htmlsummaryreplaced IS NOT NULL
															THEN concat('<div class="text-result-summary">',
																		uniqueitem.htmlsummaryreplaced,
																		'</div>')
															ELSE concat('<div class="text-result-summary">',
																		uniqueitem.htmlsummary,
																		'</div>')
															END,
															(SELECT string_agg(uniqueessence.htmllink, '') 
															FROM uniqueessence
															WHERE uniqueessence.id_item = uniqueitem.id_item
															AND uniqueessence.id_essence IS NOT NULL
															GROUP BY uniqueessence.id_item
															),
													'</div>',
												 '</ul>')
								, '')
								FROM uniqueitem
								WHERE uniqueitem.id_collection = uniquecollection.id_collection
								AND uniqueitem.id_collection IS NOT NULL
								AND uniqueitem.id_item IS NOT NULL
								AND uniqueitem.id_essence IS NULL
								GROUP BY uniqueitem.id_collection
								),
							'</div>',
						'</ul>',
					'</td>',
			  '</tr>'), '')
		INTO _strHTMLContent
		FROM uniquecollection
		;
						
		_strHTML := FORMAT(_strHTML, _intCount, _charPlural, _charPlural, _strsearchinputtext, _strHTMLContent);

	ELSE
		SELECT CONCAT(_strHTML,
					'<p>Aucun résultat trouvé.</p>',
				'</div>',
			'</div>',
			'<div class="search-results">',
				'<div class="search-results-title">',
					'<h4>Résultats de la recherche ''%s'':</h4>',
				'</div>',
				'<div class="search-results-nocontent">',
					'<p>Aucun résultat trouvé.</p>',
				'</div>',
			'</div>',
		'</div>')
		INTO _strHTML;	
		
		_strHTML := FORMAT(_strHTML, _strsearchinputtext);
		
	END IF;

	RETURN _strHTML;
	
END;
$BODY$;

ALTER FUNCTION papareo.anavevo_search_function(character varying)
    OWNER TO postgres;
